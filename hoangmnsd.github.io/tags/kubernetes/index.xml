<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on Hoang</title>
    <link>https://hoangmnsd.github.io/tags/kubernetes/</link>
    <description>Recent content in Kubernetes on Hoang</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 13 Dec 2022 20:42:58 +0700</lastBuildDate><atom:link href="https://hoangmnsd.github.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Install Minikube on Linux Ubuntu arm64 (not amd64)</title>
      <link>https://hoangmnsd.github.io/posts/encrypt-install-minikube-on-linux-ubuntu-arm64-not-amd64/</link>
      <pubDate>Tue, 13 Dec 2022 20:42:58 +0700</pubDate>
      
      <guid>https://hoangmnsd.github.io/posts/encrypt-install-minikube-on-linux-ubuntu-arm64-not-amd64/</guid>
      <description>1. Story Vì sự khác biệt CPU arhchitecture có thể dẫn đến lỗi nếu bạn cài đặt phần mềm ko tương thích.
Mình có cơ hội sử dụng cả 2 loại amd64 và arm64, gặp nhiều lỗi khi làm theo các tut trên mạng nên phải viết bài này.
Check CPU architecture của máy bạn đang sử dụng:
dpkg --print-architecture kết quả có thể ra arm64 hoặc amd64, tùy theo đó mà chọn các package phù hợp để install</description>
    </item>
    
    <item>
      <title>GitOps: Playaround with ArgoCD and private Gitlab CI, ACR</title>
      <link>https://hoangmnsd.github.io/posts/encrypt-playaround-w-argocd-and-private-gitlab-ci-acr/</link>
      <pubDate>Mon, 01 Nov 2021 21:16:47 +0700</pubDate>
      
      <guid>https://hoangmnsd.github.io/posts/encrypt-playaround-w-argocd-and-private-gitlab-ci-acr/</guid>
      <description>1. Intro Demo about ArgoCD with private Gitlab CI repository, private ACR 2. Prerequisites  Basic knowledge about Azure, ssh-keygen, K8S, Gitlab, Docker commands Workspace: run commands on Azure Cloudshell Prepare an AKS cluster (Standard_DS2_v2, kubernetes version 1.21.2) Prepare an ACR (Azure container registry) with credential  export ACR_SERVER=&amp;#34;YOUR_ACR_NAME.azurecr.io&amp;#34; export ACR_USER=&amp;#34;YOUR_ACR_USER_NAME&amp;#34; export ACR_PASSWORD=&amp;#34;YOUR_ACR_PASSWORD&amp;#34; Clone 2 projects to your workspace:
 https://gitlab.com/argocd-demo2801/gitops-chart https://gitlab.com/argocd-demo2801/webapp  3. Setup 3.1. Config on Webapp repository https://gitlab.</description>
    </item>
    
    <item>
      <title>Azure: Create AKS Cluster by ARM and ACI (using CNAB, porter.sh)</title>
      <link>https://hoangmnsd.github.io/posts/azure-create-akscluster-using-arm-aci-cnab-porter/</link>
      <pubDate>Tue, 10 Aug 2021 15:03:08 +0900</pubDate>
      
      <guid>https://hoangmnsd.github.io/posts/azure-create-akscluster-using-arm-aci-cnab-porter/</guid>
      <description>Bạn muốn deploy Azure AKS Cluster bằng ARM và Azure Container Instance, sau đó deploy helm chart lên AKS cluster đó.
1. Giới Thiệu CNAB là gì? https://cnab.io/
CNAB là Cloud Native Application Bundle. Nó được thiết kế để bundling, installing, managing các distributed app.
Nó được design bởi MS, Docker, Bitami, Hashicorp, Pivotal, codefresh.
1 CNAB bao gồm 3 thành phần: Application Image, Invocation Image, Bundle descriptor.
Tác dụng mà CNAB đem lại: Package toàn bộ app của bạn, ko cần cấu trúc phức tạp,&amp;hellip;</description>
    </item>
    
    <item>
      <title>K8S 14: (on GKE Cluster) Setup Sonarqube for Maven Project With GitlabCI</title>
      <link>https://hoangmnsd.github.io/posts/k8s-xiv-on-gke-cluster-setup-sonarqube-for-maven-project-with-gitlabci/</link>
      <pubDate>Sat, 08 Aug 2020 01:18:27 +0700</pubDate>
      
      <guid>https://hoangmnsd.github.io/posts/k8s-xiv-on-gke-cluster-setup-sonarqube-for-maven-project-with-gitlabci/</guid>
      <description>Giới thiệu Tưởng tượng rằng bạn đã có:
 GKE Cluster, dựng Gitlab Runner, Gitlab self-hosted (hoặc dùng gitlab.com). 1 java project (dùng Maven) trên Gitlab. Bạn muốn sử dụng Gitlab CI để tạo pipeline.  Bài này hướng dẫn cách setup 1 server Sonarqube để scan quality code cho 1 Java (Spring) project.
Kết thúc bài này sẽ có 1 flow kiểu như sau, project Java của bạn mỗi khi có 1 commit trên Gitlab sẽ:</description>
    </item>
    
    <item>
      <title>K8S 13: Using Gitlab CI on GKE Cluster - Push Docker Image to GCR for Continuous Integration (CI)</title>
      <link>https://hoangmnsd.github.io/posts/k8s-xiii-using-gitlab-ci-push-docker-image-to-gcr-on-gke/</link>
      <pubDate>Fri, 29 May 2020 23:44:53 +0700</pubDate>
      
      <guid>https://hoangmnsd.github.io/posts/k8s-xiii-using-gitlab-ci-push-docker-image-to-gcr-on-gke/</guid>
      <description>Giới thiệu Các bài trước thì mình đã nói đến CD (Continuous Deployment) rồi, giờ chuyển sang CI (Continuous Integration)
Nhắc đến tool về CI thì có nhiều, ví dụ như Jenkins, Travis CI, Circle CI, Gitlab CI,&amp;hellip; etc.
Hôm nay mình sẽ giới thiệu về Gitlab CI
Mục đích của tutorial này là:
Setup 1 project sample để có thể sử dụng Gitlab CI, push Docker image lên Google Container Registry (GCR).</description>
    </item>
    
    <item>
      <title>K8S 12: GitOps - Using Flux with private Gitlab server and GCR for Continuous Deployment (CD) on GKE Cluster</title>
      <link>https://hoangmnsd.github.io/posts/k8s-xii-gitops-using-flux-with-private-gitlab-server-with-gcr-for-cd/</link>
      <pubDate>Fri, 22 May 2020 22:55:35 +0700</pubDate>
      
      <guid>https://hoangmnsd.github.io/posts/k8s-xii-gitops-using-flux-with-private-gitlab-server-with-gcr-for-cd/</guid>
      <description>Giới thiệu Lần mò về GitOps thì thấy đây là 1 khái niệm rất hay và thú vị
Như các bạn thấy trên hình, Flux hoạt động như 1 operator sẽ đi scan 1 Git repository và 1 (hoặc nhiều) Docker registries.
Mỗi khi bạn commit 1 file yaml lên Git repository đó, Flux sẽ tự động deploy file đó vào k8s (Đây chính là GitOps). Nếu bạn thay đổi nội dung file yaml đó và commit tiếp, Flux cũng sẽ update resources tương ứng.</description>
    </item>
    
    <item>
      <title>K8S 11: Using Keel on GKE Cluster for Continuous Deployment (CD)</title>
      <link>https://hoangmnsd.github.io/posts/k8s-xi-using-keel-on-gke-cluster-for-continuous-deployment/</link>
      <pubDate>Sat, 09 May 2020 17:36:12 +0700</pubDate>
      
      <guid>https://hoangmnsd.github.io/posts/k8s-xi-using-keel-on-gke-cluster-for-continuous-deployment/</guid>
      <description>Giới thiệu  Keel is a tool for automating Kubernetes deployment updates. Keel is stateless, robust and lightweight.
 Keel được đánh giá là 1 tool dễ cài đặt, dễ sử dụng, và rất nhẹ.
Bài này chỉ đơn giản là mình muốn demo về cách sử dụng 1 tool lightweight được nhiều người giới thiệu (Keel) thôi. Ngoài ra còn 1 số tool khác cũng được suggest nhiều, đó là Weave Flux.</description>
    </item>
    
    <item>
      <title>K8S 10: Setup Gitlab Self Hosted on GKE Cluster</title>
      <link>https://hoangmnsd.github.io/posts/k8s-x-setup-gitlab-on-gke-cluster/</link>
      <pubDate>Thu, 20 Feb 2020 12:28:58 +0900</pubDate>
      
      <guid>https://hoangmnsd.github.io/posts/k8s-x-setup-gitlab-on-gke-cluster/</guid>
      <description>Tạo Gitlab với yêu cầu là:
 disable MinIO, dùng GCS, disable cert-manager, dùng cert-manager mình tự tạo riêng, các config về resource của gitlab ở mức minimal, gitlab sẽ vào qua link gitlab.your-subdomain.your-domain.net và có HTTPS  Yêu Cầu  Đã tạo GKE Cluster có ít nhất là 3 vCPU Đã install Helm 2 Đã làm theo bài này để setup cert-manager:
K8S 9: Setup External DNS + Cert Manager + Nginx Ingress Controller Wilcard  Cách Làm 1.</description>
    </item>
    
    <item>
      <title>K8S 9: Setup External DNS &#43; Cert Manager &#43; Nginx Ingress Controller Wilcard</title>
      <link>https://hoangmnsd.github.io/posts/k8s-ix-setup-extdns-certmanager-nginxingress-wilcard/</link>
      <pubDate>Mon, 23 Dec 2019 14:02:41 +0900</pubDate>
      
      <guid>https://hoangmnsd.github.io/posts/k8s-ix-setup-extdns-certmanager-nginxingress-wilcard/</guid>
      <description>Yêu Cầu  Đã tạo GKE Cluster Đã mua 1 domain riêng, kiểu your-domain.net Đã setup service CloudDNS trong GCP console, để sử dụng dc your-domain.net:
  Cách Làm 0. Setup environment variables Các biến này sẽ dùng xuyên suốt trong bài:
export PROJECT_ID=&amp;#34;your-project-id&amp;#34; export DOMAIN=&amp;#34;your-domain.net&amp;#34; export SUBDOMAIN=&amp;#34;your-subdomain.your-domain.net&amp;#34; export YOUR_EMAIL_ADDRESS=&amp;#34;your-mail-address&amp;#34; # Cloud DNS service account nên là unique để tránh lỗi khi issue Certificate, nên mình cho thêm hậu tố `date` vào như sau:  export CLOUD_DNS_SA=&amp;#34;certmng-cdns-$(date +%d%m%Y-%H)&amp;#34; 1.</description>
    </item>
    
    <item>
      <title>K8S 8: Setup Advanced EFK Stack on GCP cluster (ElasticSearch, Fluentd, Kibana)</title>
      <link>https://hoangmnsd.github.io/posts/k8s-viii-setup-advanced-efk-stack-on-gcp/</link>
      <pubDate>Mon, 25 Nov 2019 12:42:17 +0900</pubDate>
      
      <guid>https://hoangmnsd.github.io/posts/k8s-viii-setup-advanced-efk-stack-on-gcp/</guid>
      <description>Giới thiệu Bài này hướng dẫn dựng EFK stack phức tạp hơn, dùng ConfigMap,
ElasticSearch chia làm các role &amp;ldquo;master, client, data&amp;rdquo;,
có áp dụng authentication cho Kibana để &amp;ldquo;more secure&amp;rdquo;
Cách làm Đầu tiên cần checkout source code này:
git clone https://github.com/hoangmnsd/kubernetes-series cd kubernetes-series/efk-stack-advanced 1. Tạo cluster Trên gcp thì tạo cluster bằng console, mình đã chọn loại N1 standard 2 (2vCPU,7.5GB memory), tạo cluster chứa 2 node như vậy</description>
    </item>
    
    <item>
      <title>K8S 7: Setup EFK Stack on EKS/GCP cluster (ElasticSearch, Fluentd, Kibana)</title>
      <link>https://hoangmnsd.github.io/posts/k8s-vii-setup-efk-stack-on-eks-gcp/</link>
      <pubDate>Sat, 23 Nov 2019 15:47:46 +0900</pubDate>
      
      <guid>https://hoangmnsd.github.io/posts/k8s-vii-setup-efk-stack-on-eks-gcp/</guid>
      <description>Yêu cầu Đã cài đặt eksctl, kubectl
Cách làm git clone https://github.com/hoangmnsd/kubernetes-series cd kubernetes-series/efk-stack 1. Tạo cluster 1.1. eks trên eks phải tạo cluster bằng file này cluster-efk.yaml
có thể đổi tên cluster, tạo thêm node, đổi type của node trong file đó, nhưng nên chọn 1 node có 4vCPU, &amp;gt;8GB (t2.xlarge), đã test trường hợp sử dụng t2.large (2 vCPU, 8 GB Mem) cũng ok
eksctl create cluster -f cluster-efk.</description>
    </item>
    
    <item>
      <title>K8S 6: Using Postgresql Run Outside Cluster (in Another Host Ec2)</title>
      <link>https://hoangmnsd.github.io/posts/k8s-vi-using-postgres-run-outside-cluster-in-another-host-ec2/</link>
      <pubDate>Thu, 21 Nov 2019 10:39:03 +0900</pubDate>
      
      <guid>https://hoangmnsd.github.io/posts/k8s-vi-using-postgres-run-outside-cluster-in-another-host-ec2/</guid>
      <description>If you delete the database pod all data is lost. We&amp;rsquo;ll fix this by using a database that lives externally to our cluster.
 Yêu cầu Workplace: Amazon EC2 Linux
Đã tạo môi trường, cluster của riêng bạn, có thể dùng eksctl tạo từ file cluster.yaml sau
apiVersion: eksctl.io/v1alpha5 kind: ClusterConfig metadata: name: base-project region: us-east-1 availabilityZones: [&amp;quot;us-east-1a&amp;quot;, &amp;quot;us-east-1d&amp;quot;] nodeGroups: - name: nodegrp-1 instanceType: t2.medium desiredCapacity: 1 ssh: # import public key from file publicKeyPath: /home/ec2-user/.</description>
    </item>
    
    <item>
      <title>K8S 5: Using Helm Chart With Kubectl</title>
      <link>https://hoangmnsd.github.io/posts/k8s-v-using-helm-chart-w-kubectl/</link>
      <pubDate>Tue, 19 Nov 2019 17:25:05 +0900</pubDate>
      
      <guid>https://hoangmnsd.github.io/posts/k8s-v-using-helm-chart-w-kubectl/</guid>
      <description>Giới thiệu Trước khi dùng helm, mình đã dùng kubectl để run app này ok:
https://github.com/hoangmnsd/kubernetes-series/tree/master/spring-maven-postgres-docker-k8s
tuy nhiên việc chạy riêng từng command kubectl apply -f … và việc quản lý version tập trung của kubectl bất tiện đã dẫn đến việc cần dùng Helm để quản lý kubernetes cluster
Vậy nên giờ mình sẽ cấu trúc lại folder https://github.com/hoangmnsd/kubernetes-series/tree/master/spring-maven-postgres-docker-k8s để sử dụng được Helm,
Sau khi cấu trúc lại thì kết quả cuối cùng là project này https://github.</description>
    </item>
    
    <item>
      <title>K8S 4: App Micro Services on AWS with eksctl</title>
      <link>https://hoangmnsd.github.io/posts/k8s-iv-app-micro-services-on-aws-w-eksctl/</link>
      <pubDate>Fri, 15 Nov 2019 17:09:22 +0900</pubDate>
      
      <guid>https://hoangmnsd.github.io/posts/k8s-iv-app-micro-services-on-aws-w-eksctl/</guid>
      <description>Run Spring Boot + Postgresql App by Docker Compose/Kubernetes Để vọc Kubernetes trên AWS, có nhiều cách:
cách 1 là dùng Service EKS của AWS, làm việc trên Console luôn, rất trực quan
cách 2 là dùng eksctl là CLI của AWS phát triển, nhiệm vụ tương tự như Service EKS, nhưng ta làm việc với nó trên CLI/terminal
cách 3 là tạo 1 EC2 Ubuntu 18.04 LTS (t2.medium trở lên), cài minikube lên nó, dựng 1 cluster</description>
    </item>
    
    <item>
      <title>K8S 3: Using eksctl on Amazon Linux EC2</title>
      <link>https://hoangmnsd.github.io/posts/k8s-iii-using-eksctl-on-amazon-linux/</link>
      <pubDate>Thu, 14 Nov 2019 17:16:22 +0900</pubDate>
      
      <guid>https://hoangmnsd.github.io/posts/k8s-iii-using-eksctl-on-amazon-linux/</guid>
      <description>Giới thiệu Để vọc Kubernetes trên AWS, có nhiều cách:
cách 1 là dùng Service EKS của AWS, làm việc trên Console luôn, rất trực quan
cách 2 là dùng eksctl là CLI của AWS phát triển, nhiệm vụ tương tự như Service EKS, nhưng ta làm việc với nó trên CLI/terminal
cách 3 là tạo 1 EC2 Ubuntu 18.04 LTS (t2.medium trở lên), cài minikube lên nó, dựng 1 cluster</description>
    </item>
    
    <item>
      <title>K8S 2: How to Access K8s Dashboard On Aws Ec2 Ubuntu</title>
      <link>https://hoangmnsd.github.io/posts/k8s-ii-how-to-access-dashboard-on-aws-ec2-ubuntu/</link>
      <pubDate>Tue, 12 Nov 2019 00:15:50 +0900</pubDate>
      
      <guid>https://hoangmnsd.github.io/posts/k8s-ii-how-to-access-dashboard-on-aws-ec2-ubuntu/</guid>
      <description>Giới thiệu Để vọc Kubernetes trên AWS, có nhiều cách:
cách 1 là dùng Service EKS của AWS, làm việc trên Console luôn, rất trực quan
cách 2 là dùng eksctl là CLI của AWS phát triển, nhiệm vụ tương tự như Service EKS, nhưng ta làm việc với nó trên CLI/terminal
cách 3 là tạo 1 EC2 Ubuntu 18.04 LTS (t2.medium trở lên), cài minikube lên nó, dựng 1 cluster</description>
    </item>
    
    <item>
      <title>K8S 1: App Micro Services on AWS with Minikube</title>
      <link>https://hoangmnsd.github.io/posts/k8s-i-app-micro-services-on-aws-w-minikube/</link>
      <pubDate>Fri, 11 Oct 2019 15:14:01 +0900</pubDate>
      
      <guid>https://hoangmnsd.github.io/posts/k8s-i-app-micro-services-on-aws-w-minikube/</guid>
      <description>Giới thiệu Để vọc Kubernetes trên AWS, có nhiều cách:
cách 1 là dùng Service EKS của AWS, làm việc trên Console luôn, rất trực quan
cách 2 là dùng eksctl là CLI của AWS phát triển, nhiệm vụ tương tự như Service EKS, nhưng ta làm việc với nó trên CLI/terminal
cách 3 là tạo 1 EC2 Ubuntu 18.04 LTS (t2.medium trở lên), cài minikube lên nó, dựng 1 cluster</description>
    </item>
    
  </channel>
</rss>
